from Crypto.Util.number import inverse, long_to_bytes

def isqrt(n):
  x = n
  y = (x + n // x) // 2
  while y < x:
    x = y
    y = (x + n // x) // 2
  return x

# fermat factorization
def fermat(n, verbose=False):
    a = isqrt(n)  # int(ceil(n**0.5))
    b2 = a*a - n
    b = isqrt(n)  # int(b2**0.5)
    count = 0
    while b*b != b2:
        if verbose:
            print('Trying: a=%s b2=%s b=%s' % (a, b2, b))
        a = a + 1
        b2 = a*a - n
        b = isqrt(b2)  # int(b2**0.5)
        count += 1
    p=a+b
    q=a-b
    assert n == p * q
    return p, q

# rsa
N = 19941761574905742888287481436741891092124181365374951557784462831976463640107265018634834348445714890239773671635245721007690323617473110640838905137749040079027523456576873242576882348266023282328418714706775196352487380997352642934338999701240803315143633815388891936049690566875086476878846288179053430346474607507140036260924419560806005408849547824680623840905827643373832321736642361809029363098769822048159935628385558949380403530181068302284344450193809037352292218892697094260257903235373427839438588016417069626966199168116250816624950794879795025563625197229849548571880188149181610538268071041049047969843
e = 65537
p, q = fermat(N)
phi = (p - 1) * (q - 1)
d = inverse(e, phi)

c = "1988485752816603419429035490102559454780640153479719954958054370853221253149463242805549913884352375195700573804489468586048166293155196062139063129843463305054035591340171382191970297264224412110518921248838305263451454271891276948057908147173115246465013260604658154061664201662794103501624159673086264544744757112772145863773180603668686462400409710020777353930439223484072904284076703999739531521180376362124667231087662531121127471008963508634982558020180434738014455407480013270833949762016165945215121280663999417751212723592001289388652238561621848346407525794583039448395153917679000964636455519953229458XXXX"

import itertools

possible_digits = '0123456789'
combinations = itertools.product(possible_digits, repeat=4)

for comb in combinations:
    new_c = c.replace('XXXX', ''.join(comb))
    m = pow(int(new_c), d, N)
    flag = long_to_bytes(m).decode("latin-1")

    if flag.startswith("H7CTF{"):
        print(f"Found flag using combination: {''.join(comb)}")
        print(flag)
        raise SystemExit
#H7CTF{f3rm@t_r3@lly_l2f7_@!!_7h3se_unpr0v3d!}
